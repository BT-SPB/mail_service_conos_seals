import base64
import logging
from copy import deepcopy
from functools import wraps
from datetime import datetime
from json import JSONDecodeError
from typing import Any, Callable, Literal, get_args

import requests
from requests.auth import HTTPBasicAuth
from dateutil.relativedelta import relativedelta

from config import config
from src.utils import parse_datetime

logger = logging.getLogger(__name__)

KAPPA_URL = "http://kappa5.group.ru:81/ca/hs/interaction/"
LOCAL_URL = "http://10.10.0.10:81/ca/hs/interaction/"

SendMethodName = Literal["SendProductionDataToTransaction", "SendDataToMonitoringImport2"]


def enrich_containers_with_provision_date(
        function_name: SendMethodName,
        source_data: dict[str, Any]
) -> dict[str, Any]:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ) –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –§–° (–î–∞—Ç–∞–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è–§–°–ü–æ–ì–ü)
    –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–∏–∫–∏ –∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ –¶–£–ü.

    Args:
        function_name: –ò–º—è –º–µ—Ç–æ–¥–∞/—Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ
            "SendProductionDataToTransaction".
        source_data: –í—Ö–æ–¥–Ω–æ–π payload, –æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏:
            - "transaction_numbers": list[str] (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            - "containers": list[dict] (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
                - "container" (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
                - "–ò–º–ø–ú–æ—Ä—Å–∫–∞—è–ü–µ—Ä–µ–≤–æ–∑–∫–∞–î–∞—Ç–∞–í—ã–≥—Ä—É–∑–∫–∏–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞" (–¥–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å)

    Returns:
        dict[str, Any]: –ù–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Ç–µ–º–∏ –∂–µ –∫–ª—é—á–∞–º–∏, –Ω–æ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è–º–∏
        –ø–æ–ª—è "–î–∞—Ç–∞–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è–§–°–ü–æ–ì–ü" –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å–ø–∏—Å–∫–∞ containers (—Ç–æ–ª—å–∫–æ –¥–ª—è
        —Ç–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–Ω–µ–µ –≤ –¶–£–ü –±—ã–ª–∏ –ø—É—Å—Ç—ã–µ –¥–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è/–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è).
    """
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç–æ–¥
    if function_name != "SendProductionDataToTransaction":
        return source_data

    # –ö–æ–ø–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
    data = deepcopy(source_data)

    # –ë—ã—Å—Ç—Ä—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ ‚Äî —É–º–µ–Ω—å—à–∞—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ —Å–ª–æ–≤–∞—Ä—é
    transaction_numbers = data.get("transaction_numbers")
    containers = data.get("containers")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: –Ω–∞–º –Ω—É–∂–Ω—ã —Å–ø–∏—Å–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if not (transaction_numbers and isinstance(transaction_numbers, list) and
            containers and
            isinstance(containers, list)
    ):
        return source_data

    # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è —Å –¥–∞—Ç–æ–π –≤—ã–≥—Ä—É–∑–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    date_issue_field = "–ò–º–ø–ú–æ—Ä—Å–∫–∞—è–ü–µ—Ä–µ–≤–æ–∑–∫–∞–î–∞—Ç–∞–í—ã–≥—Ä—É–∑–∫–∏–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"

    # –°–æ–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤ payload –µ—Å—Ç—å –¥–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏.
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –±–µ–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∞—Ç—ã –≤—ã–≥—Ä—É–∑–∫–∏.
    containers_with_issue_date: set[str] = {
        cont["container"] for cont in containers
        if isinstance(cont, dict) and cont.get("container") and cont.get(date_issue_field)
    }

    if not containers_with_issue_date:
        # –ù–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –¥–∞—Ç–æ–π –≤—ã–≥—Ä—É–∑–∫–∏ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return source_data

    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π transaction number
    transaction_number = transaction_numbers[0].split()[0]

    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–æ–ª–µ–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö —É –¶–£–ü
    func_main = "ContainersWithProductionRequisitesByTransactionNumber"
    receiving_fc_field = "–í–Ω—É—Ç—Ä–∏–ø–æ—Ä—Ç–æ–≤–æ–µ–≠–∫—Å–ø–µ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–î–∞—Ç–∞–ü–æ–ª—É—á–µ–Ω–∏—è–§–°"
    provision_fc_field = "–î–∞—Ç–∞–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è–§–°–ü–æ–ì–ü"

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ TSUP. –û–∂–∏–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤–∏–¥–∞ [{container_id: {field: value, ...}}, ...]
    response: list[dict[str, dict[str, str]]] = tsup_http_request(
        func_main,
        transaction_number,
        (receiving_fc_field, provision_fc_field)
    )
    if not response:
        return source_data

    # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤ TSUP –æ–±–∞ –ø–æ–ª—è –ø—É—Å—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ –∏—Ö —Å—Ç–æ–∏—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å.
    containers_need_update: set[str] = {
        cont_id
        for data_tsup_item in response
        for cont_id, fields in data_tsup_item.items()
        if cont_id in containers_with_issue_date
           and isinstance(fields, dict)
           and fields.get(receiving_fc_field) == ""
           and fields.get(provision_fc_field) == ""
    }

    if not containers_with_issue_date:
        # –ù–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
        return source_data

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º –≤ –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –§–°.
    for container in containers:
        # –ó–∞—â–∏—â–∞–µ–º—Å—è –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if not isinstance(container, dict):
            continue

        container_id = container.get("container")

        if not container_id or container_id not in containers_need_update:
            continue

        issue_date_str = container.get(date_issue_field)
        if not issue_date_str:
            continue

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –º–µ—Å—è—Ü. –û—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.
        try:
            new_date: datetime = parse_datetime(container[date_issue_field]) + relativedelta(months=1)
            container[provision_fc_field] = new_date.strftime(config.tsup_datetime_format)
        except Exception as e:
            logger.exception(
                "‚õî –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è/–ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ %s (–∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: %s): %s",
                container_id, issue_date_str, e
            )

    return data


def cache_http_requests(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞.

    Args:
        func (Callable): –§—É–Ω–∫—Ü–∏—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å.

    Returns:
        Callable: –û–±—ë—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    """

    cache: dict[str, list | dict | None] = {}
    max_cache_size = 40

    @wraps(func)
    def wrapper(function: str, *args: str, **kwargs) -> list | dict | None:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        function_args = "_".join(
            "_".join(arg) if isinstance(arg, (tuple, list, set)) else str(arg)
            for arg in args
        )

        cache_key = f"{function}_{function_args}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à–µ
        if cache_key in cache:
            cache_value = cache[cache_key]
            logger.debug(f"üåê –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: {cache_key}")
            logger.debug(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω –∏–∑ –∫—ç—à–∞: {cache_value}")
            return cache_value

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        result = func(function, *args, **kwargs)
        cache[cache_key] = result

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
        if len(cache) > max_cache_size:
            cache.pop(next(iter(cache)))

        return result

    return wrapper


@cache_http_requests
def tsup_http_request(
        function_name: str,
        *args: str | tuple[str],
        kappa: bool = False,
        encode: bool = True,
        login: str = config.user_1c,
        password: str = config.password_1c,
) -> list | dict | None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É 1–° –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

    –§—É–Ω–∫—Ü–∏—è —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É, –∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    –¥–µ–ª–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –≤ base64 –¥–ª—è URL-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

    Args:
        function_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–∑—ã–≤–∞–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏/–º–µ—Ç–æ–¥–∞ API –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 1–°
        *args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –≤ URL
        kappa: –§–ª–∞–≥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π/—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
        encode: –ï—Å–ª–∏ True, –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–¥–∏—Ä—É—é—Ç—Å—è –≤ base64
        login: –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–∑–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        password: –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–∑–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

    Returns:
        list | dict | None: –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –µ—Å–ª–∏ —É—Å–ø–µ—à–µ–Ω. –ò–Ω–∞—á–µ ‚Äî None.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: base64 –∏–ª–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    encode_func: Callable[[str], str] = (
        (lambda x: base64.urlsafe_b64encode(x.encode()).decode()) if encode else
        (lambda x: x)
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∫–æ–¥–∏—Ä—É—è –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ —Å–æ–µ–¥–∏–Ω—è—è —á–µ—Ä–µ–∑ —Å–ª–µ—à
    # function_args: str = "/".join(encode_func(arg) for arg in args if arg)
    function_args: str = "/".join(
        encode_func(",".join(arg) if isinstance(arg, (tuple, list, set)) else str(arg))
        for arg in args if arg
    )

    # –°–ø–∏—Å–æ–∫ URL-–∞–¥—Ä–µ—Å–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    urls = [
        f"{KAPPA_URL if kappa else LOCAL_URL}{function_name}/{function_args}",
        f"{LOCAL_URL if kappa else KAPPA_URL}{function_name}/{function_args}"
    ]

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã
    for url in urls:
        try:
            logger.debug(f"üåê –û—Ç–ø—Ä–∞–≤–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {url}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º 10 —Å–µ–∫—É–Ω–¥
            response = requests.get(
                url,
                auth=HTTPBasicAuth(login, password),
                timeout=30
            )

            if response.status_code == 200:
                # –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
                try:
                    result = response.json()
                    logger.debug(f"‚úîÔ∏è –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {result}")
                    return result
                except JSONDecodeError:
                    logger.warning(
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ .json(). –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞: "
                        f"{response.text or '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç'}"
                    )
            else:
                logger.warning(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}. "
                    f"–ö–æ–¥: {response.status_code}, –ü—Ä–∏—á–∏–Ω–∞: {response.reason}"
                )
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
            logger.exception(f"‚õî –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
            continue


def send_data_to_tsup(
        function_name: SendMethodName,
        data: dict[str, Any],
        kappa: bool = False,
        login: str = config.user_1c,
        password: str = config.password_1c,
        apply_provision_enrichment: bool = True
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON) –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¶–£–ü (1–°) —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π.

    –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π, –ø—Ä–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–ª–∞–≥–µ `apply_provision_enrichment`,
    –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –§–°
    (—Å–º. `enrich_containers_with_provision_date`).

    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–ª–∞–≥–∞ `kappa`, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—É–¥–µ—Ç
    –ª–∏–±–æ `KAPPA_URL`, –ª–∏–±–æ `LOCAL_URL`. –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –Ω–µ —É–¥–∞–ª–∞—Å—å,
    –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π.

    Args:
        function_name: –ò–º—è –≤—ã–∑—ã–≤–∞–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏/–º–µ—Ç–æ–¥–∞ API –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 1–°.
        data: –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.
        kappa: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤:
            - True  ‚Üí —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ `KAPPA_URL`, –∑–∞—Ç–µ–º —Ä–µ–∑–µ—Ä–≤ –Ω–∞ `LOCAL_URL`;
            - False ‚Üí –Ω–∞–æ–±–æ—Ä–æ—Ç.
        login: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–∑–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
        password: –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–∑–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
        apply_provision_enrichment: –ï—Å–ª–∏ True ‚Äî –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
            –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ `enrich_containers_with_provision_date`.

    Returns:
        bool: True ‚Äî –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä;
        False ‚Äî –µ—Å–ª–∏ –æ–±–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–µ–π.


    –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ data –¥–ª—è SendProductionDataToTransaction:
        {
            "bill_of_lading": str,                      # –ù–æ–º–µ—Ä –∫–æ–Ω–æ—Å–∞–º–µ–Ω—Ç–∞
            "–ò–º–ø–ú–æ—Ä—Å–∫–∞—è–ü–µ—Ä–µ–≤–æ–∑–∫–∞–î–∞—Ç–∞–ü–æ–ª—É—á–µ–Ω–∏—è–î–£": str,  # –î–∞—Ç–∞ –î–û
            "–ò–º–ø–ú–æ—Ä—Å–∫–∞—è–ü–µ—Ä–µ–≤–æ–∑–∫–∞–ù–æ–º–µ—Ä–†–µ–π—Å–∞–§–∏–¥–µ—Ä": str,  # –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞
            "–≠—Ç–æ–ö–æ–Ω–æ—Å–∞–º–µ–Ω—Ç": str[bool],                 # –§–ª–∞–≥, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∫–æ–Ω–æ—Å–∞–º–µ–Ω—Ç–æ–º –∏–ª–∏ –Ω–µ—Ç
            "transaction_numbers": list[str],           # –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∏ –¥–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é TransactionNumberFromBillOfLading
            "source_file_name": str,                    # –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            "source_file_base64": str,                  # –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª, –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ base64
            "containers": [                             # –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                {
                    "container": str,                                 # –ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    "–ò–º–ø–ú–æ—Ä—Å–∫–∞—è–ü–µ—Ä–µ–≤–æ–∑–∫–∞–ù–æ–º–µ—Ä–ü–ª–æ–º–±—ã": list[str],      # –°–ø–∏—Å–æ–∫ –ø–ª–æ–º–± (–æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫)
                    "–ò–º–ø–ú–æ—Ä—Å–∫–∞—è–ü–µ—Ä–µ–≤–æ–∑–∫–∞–î–∞—Ç–∞–í—ã–≥—Ä—É–∑–∫–∏–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞": str  # –î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏
                },
                ...
            ]
        }

        –ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è SendProductionDataToTransaction:
        {
            "bill_of_lading": "VX75EA25000897",
            "–ò–º–ø–ú–æ—Ä—Å–∫–∞—è–ü–µ—Ä–µ–≤–æ–∑–∫–∞–î–∞—Ç–∞–ü–æ–ª—É—á–µ–Ω–∏—è–î–£": "28.05.2025 00:00:00",
            "–ò–º–ø–ú–æ—Ä—Å–∫–∞—è–ü–µ—Ä–µ–≤–æ–∑–∫–∞–ù–æ–º–µ—Ä–†–µ–π—Å–∞–§–∏–¥–µ—Ä": "2503",
            "–≠—Ç–æ–ö–æ–Ω–æ—Å–∞–º–µ–Ω—Ç": "true",
            "transaction_numbers": ["–ê–ê-0095444 –æ—Ç 14.04.2025", "–ê–ê-0095445 –æ—Ç 15.04.2025"],
            "source_file_name": "–ö–°_VX75EA25000897.pdf",
            "source_file_base64": "JVBERi0xLjcKJeLjz9MK...",
            "containers": [
                {
                    "container": "DFTU1001462",
                    "–ò–º–ø–ú–æ—Ä—Å–∫–∞—è–ü–µ—Ä–µ–≤–æ–∑–∫–∞–ù–æ–º–µ—Ä–ü–ª–æ–º–±—ã": ["22528791", "2252880"],
                    "–ò–º–ø–ú–æ—Ä—Å–∫–∞—è–ü–µ—Ä–µ–≤–æ–∑–∫–∞–î–∞—Ç–∞–í—ã–≥—Ä—É–∑–∫–∏–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞": "28.05.2025 11:34:00"
                },
                {
                    "container": "DFTU1001502",
                    "–ò–º–ø–ú–æ—Ä—Å–∫–∞—è–ü–µ—Ä–µ–≤–æ–∑–∫–∞–ù–æ–º–µ—Ä–ü–ª–æ–º–±—ã": ["2117691"],
                    "–ò–º–ø–ú–æ—Ä—Å–∫–∞—è–ü–µ—Ä–µ–≤–æ–∑–∫–∞–î–∞—Ç–∞–í—ã–≥—Ä—É–∑–∫–∏–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞": "28.05.2025 11:41:00"
                }
            ]
        }

        –ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è SendDataToMonitoringImport2:
        {
            "bill_of_lading": "NNLRZH241632185",
            "containers": [
                {
                    "container": "FTAU1721399",
                    "size": "20",
                    "type": "DC",
                    "cargo_gross_weight": "23680.0",
                    "tare_weight": ""
                }
            ],
            "shipping_line": "Junan",
            "bt_user": "Cherdantsev",
            "bt_id": "a95785c2b7244e438da0b091a86c833e",
            "bt_partner": "AA-024296"
        }
    """
    if function_name not in get_args(SendMethodName):
        logger.error(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ 'function_name': %s. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: %s.",
            function_name, ", ".join(get_args(SendMethodName))
        )
        return False

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ URL –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    # –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–ª–∞–≥–∞ kappa
    urls = [
        f"{KAPPA_URL if kappa else LOCAL_URL}{function_name}",
        f"{LOCAL_URL if kappa else KAPPA_URL}{function_name}"
    ]

    # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –§–°
    if apply_provision_enrichment:
        data = enrich_containers_with_provision_date(function_name, data)

    for url in urls:
        try:
            logger.debug(f"üåê –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {url}.")
            # –í—ã–ø–æ–ª–Ω—è–µ–º POST-–∑–∞–ø—Ä–æ—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º 60 —Å–µ–∫—É–Ω–¥
            response = requests.post(
                url,
                auth=HTTPBasicAuth(login, password),
                headers={"Content-Type": "application/json; charset=utf-8"},
                json=data,
                timeout=60
            )

            if response.status_code == 200:
                logger.debug(
                    f"‚úîÔ∏è –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. "
                    f"–û—Ç–≤–µ—Ç: {response.text or '–ø—É—Å—Ç–æ–π'}"
                )
                return True
            else:
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                logger.warning(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. "
                    f"–ö–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}"
                )

        except requests.exceptions.RequestException as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–µ
            logger.exception(f"‚õî –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ {url}: {e}")
            continue  # –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä

    return False


if __name__ == "__main__":
    from src.utils import read_json
    import json

    data_json = read_json(r"C:\Users\Cherdantsev\Desktop\–ù–æ–≤–∞—è –ø–∞–ø–∫–∞ (2)\–î–£_SILJEA25586000.pdf_1c.json")
    print(json.dumps(data_json, indent=4, ensure_ascii=False))
    new_dict = enrich_containers_with_provision_date("SendProductionDataToTransaction", data_json)
    print(json.dumps(new_dict, indent=4, ensure_ascii=False))
    # print(json.dumps(data_json, indent=4, ensure_ascii=False))

    # from src.utils import read_json, write_json
    # from src.utils_data_process import remap_production_data_for_1c
    #
    # data_json = read_json(r"C:\Users\Cherdantsev\Documents\data\OCR_CONOS_FILES\–î–£_EGML001367.pdf_one_cont.json")
    # # data_json = read_json(r"C:\Users\Cherdantsev\Documents\develop\OCR_CONOS_FILES\–î–£_EGML001367.pdf_one_cont.json")
    # data_json = remap_production_data_for_1c(data_json)
    # # write_json(r"C:\Users\Cherdantsev\Desktop\test\test.json", data_json)
    # print("–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏:", send_production_data(data_json))
    # print(data_json)

    # data_json = read_json(
    #     r"C:\Users\Cherdantsev\Desktop\250528_173535_aby@sdrzbt.ru\_–ö–°_AKKSUS25060413SRV.pdf.json"
    # )
    # remap_production_data(data_json)
    # write_json(r"C:\Users\Cherdantsev\Desktop\250528_173535_aby@sdrzbt.ru\–ö–°_AKKSUS25060413SRV.pdf.json",
    #            data_json)

    # func = r'TransactionNumberFromBillOfLading'
    # arg = r'MDTRLS2506086'
    # print(cup_http_request(func, arg))
    # for i in range(2):
    #     tn = cup_http_request(func, arg)
    # print(tn)

    # func = "GetTransportPositionNumberByTransactionNumber"
    # print(cup_http_request(func, tn[-1].split()[0], encode=False))

    # container_numbers_cup: list[list[str]] = [
    #     # –û—á–∏—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    #     [number.strip() for number in tsup_http_request(
    #         "GetTransportPositionNumberByTransactionNumber",
    #         # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä, –æ—Ç—Å–µ–∫–∞—è –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ê–ê-0095444 –æ—Ç 14.04.2025" ‚Üí "–ê–ê-0095444"
    #         transaction_number.split()[0],
    #         encode=False
    #     )]
    #     for transaction_number in ["–ê–ê-0095444", "–êG-0095563"]
    # ]
    #
    # print(container_numbers_cup)
