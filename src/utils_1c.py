import copy
import base64
from typing import Callable
from functools import wraps

import requests
from requests.auth import HTTPBasicAuth

from config import CONFIG
from src.logger import logger

KAPPA_URL = "http://kappa5.group.ru:81/ca/hs/interaction/"
LOCAL_URL = "http://10.10.0.10:81/ca/hs/interaction/"


def cache_http_requests(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞.

    Args:
        func (Callable): –§—É–Ω–∫—Ü–∏—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å.

    Returns:
        Callable: –û–±—ë—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    """

    cache: dict[str, list | dict | None] = {}
    max_cache_size = 40

    @wraps(func)
    def wrapper(function: str, *args: str, **kwargs) -> list | dict | None:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        function_args = "_".join(args)
        url_cache_key = f"{function}_{function_args}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à–µ
        if url_cache_key in cache:
            logger.debug("üíæ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –∫—ç—à–∞.")
            return cache[url_cache_key]

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        result = func(function, *args, **kwargs)
        cache[url_cache_key] = result

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
        if len(cache) > max_cache_size:
            cache.pop(next(iter(cache)))

        return result

    return wrapper


@cache_http_requests
def cup_http_request(
        function: str,
        *args: str,
        kappa: bool = False,
        encode: bool = True,
        user_1c: str = CONFIG.USER_1C,
        password_1c: str = CONFIG.PASSWORD_1C,
) -> list | dict | None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É 1–° –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

    –§—É–Ω–∫—Ü–∏—è —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É, –∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    –¥–µ–ª–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –≤ base64 –¥–ª—è URL-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

    Args:
        function: –ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–∑—ã–≤–∞–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏/–º–µ—Ç–æ–¥–∞ API –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 1–°
        *args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –≤ URL
        kappa: –§–ª–∞–≥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π/—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
        encode: –ï—Å–ª–∏ True, –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–¥–∏—Ä—É—é—Ç—Å—è –≤ base64
        user_1c: –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–∑–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        password_1c: –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–∑–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

    Returns:
        list | dict | None: –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –µ—Å–ª–∏ —É—Å–ø–µ—à–µ–Ω. –ò–Ω–∞—á–µ ‚Äî None.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: base64 –∏–ª–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    encode_func: Callable[[str], str] = (
        (lambda x: base64.urlsafe_b64encode(x.encode()).decode()) if encode else
        (lambda x: x)
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∫–æ–¥–∏—Ä—É—è –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ —Å–æ–µ–¥–∏–Ω—è—è —á–µ—Ä–µ–∑ —Å–ª–µ—à
    function_args: str = "/".join(encode_func(arg) for arg in args)

    # –°–ø–∏—Å–æ–∫ URL-–∞–¥—Ä–µ—Å–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    urls = [
        f"{KAPPA_URL if kappa else LOCAL_URL}{function}/{function_args}",
        f"{LOCAL_URL if kappa else KAPPA_URL}{function}/{function_args}"
    ]

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã
    for url in urls:
        try:
            logger.debug(f"üåê –û—Ç–ø—Ä–∞–≤–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {url}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º 10 —Å–µ–∫—É–Ω–¥
            response = requests.get(
                url,
                auth=HTTPBasicAuth(user_1c, password_1c),
                timeout=30
            )

            if response.status_code == 200:
                # –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
                result = response.json()
                logger.debug(f"‚úîÔ∏è –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {result}")
                return result
            else:
                logger.warning(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}. "
                    f"–ö–æ–¥: {response.status_code}, –ü—Ä–∏—á–∏–Ω–∞: {response.reason}"
                )
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
            logger.exception(f"‚õî –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
            continue


def remap_production_data(data: dict[str, any]) -> None:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ 1–°, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—è –ø–æ–ª—è –∏ —É–¥–∞–ª—è—è –Ω–µ–Ω—É–∂–Ω—ã–µ.

    –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω—è–µ—Ç –≤—Ö–æ–¥–Ω–æ–π —Å–ª–æ–≤–∞—Ä—å, –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—è –µ–≥–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä 1–°.
    –£–¥–∞–ª—è–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∫–ª—é—á–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ —Å–∏—Å—Ç–µ–º—ã.
    """
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    data["–ò–º–ø–ú–æ—Ä—Å–∫–∞—è–ü–µ—Ä–µ–≤–æ–∑–∫–∞–î–∞—Ç–∞–ü–æ–ª—É—á–µ–Ω–∏—è–î–£"] = data.pop("document_created_datetime", "")
    data["–ò–º–ø–ú–æ—Ä—Å–∫–∞—è–ü–µ—Ä–µ–≤–æ–∑–∫–∞–ù–æ–º–µ—Ä–†–µ–π—Å–∞–§–∏–¥–µ—Ä"] = data.pop("voyage_number", "")
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—è document_type
    data.pop("document_type", None)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    for container in data.get("containers", []):
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π –≤ —Å–ª–æ–≤–∞—Ä–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container["–ò–º–ø–ú–æ—Ä—Å–∫–∞—è–ü–µ—Ä–µ–≤–æ–∑–∫–∞–ù–æ–º–µ—Ä–ü–ª–æ–º–±—ã"] = container.pop("seals", [])
        container["–ò–º–ø–ú–æ—Ä—Å–∫–∞—è–ü–µ—Ä–µ–≤–æ–∑–∫–∞–î–∞—Ç–∞–í—ã–≥—Ä—É–∑–∫–∏–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"] = container.pop("upload_datetime", "")
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—è note
        container.pop("note", None)


def send_production_data(
        data_source: dict[str, any],
        kappa: bool = False,
        user_1c: str = CONFIG.USER_1C,
        password_1c: str = CONFIG.PASSWORD_1C,
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON) –Ω–∞ —Å–µ—Ä–≤–µ—Ä 1–° —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π.

    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–ª–∞–≥–∞ `kappa`, —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä,
    –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ–ø—ã—Ç–∫—É –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π.

    Args:
        data_source (dict): –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
        {
            "bill_of_lading": str,            # –ù–æ–º–µ—Ä –∫–æ–Ω–æ—Å–∞–º–µ–Ω—Ç–∞
            "document_created_datetime": str, # –î–∞—Ç–∞ –î–û
            "voyage_number": str,             # –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞
            "transaction_numbers": list[str], # –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∏ –¥–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é TransactionNumberFromBillOfLading
            "source_file_name": str,          # –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            "source_file_base64": str,        # –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª, –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ base64
            "containers": [                   # –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                {
                    "container": str,         # –ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    "seals": list[str],       # –°–ø–∏—Å–æ–∫ –ø–ª–æ–º–± (–æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫)
                    "upload_datetime": str    # –î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏
                },
                ...
            ]
        }

        –ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:
            {
                "bill_of_lading": "VX75EA25000897",
                "transaction_numbers": ["–ê–ê-0095444 –æ—Ç 14.04.2025", "–ê–ê-0095445 –æ—Ç 15.04.2025"],
                "source_file_name": "–ö–°_VX75EA25000897.pdf",
                "source_file_base64": "JVBERi0xLjcKJeLjz9MK...",
                "containers": [
                    {
                        "container": "DFTU1001462",
                        "seals": ["22528791", "2252880"]
                    },
                    {
                        "container": "DFTU1001502",
                        "seals": ["2117691"]
                    }
                ]
            }

        kappa: –ï—Å–ª–∏ True ‚Äî –æ—Å–Ω–æ–≤–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º –±—É–¥–µ—Ç `KAPPA_URL`, –∏–Ω–∞—á–µ `LOCAL_URL`
        user_1c: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–∑–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        password_1c: –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–∑–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

    Returns:
        True - –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä. False - –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    # –°–æ–∑–¥–∞–µ–º –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    data = copy.deepcopy(data_source)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–æ—Ä–º–∞—Ç—É 1–°
    remap_production_data(data)

    # –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 1–°
    function_name: str = "SendProductionDataToTransaction"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–ª–∞–≥–∞ kappa
    urls = [
        f"{KAPPA_URL if kappa else LOCAL_URL}{function_name}",
        f"{LOCAL_URL if kappa else KAPPA_URL}{function_name}"
    ]

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ JSON —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    headers = {"Content-Type": "application/json; charset=utf-8"}

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —É–¥–∞–ª—è—è –∏—Ö –∏–∑ —Å–ª–æ–≤–∞—Ä—è –¥–∞–Ω–Ω—ã—Ö
    transaction_numbers: list[str] = data.pop("transaction_numbers", [])

    # –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    success_flag = False

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å–¥–µ–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    for transaction_number in transaction_numbers:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        data["transaction_number"] = transaction_number

        for url in urls:
            try:
                logger.debug(f"üåê –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {url} –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_number}")
                # –í—ã–ø–æ–ª–Ω—è–µ–º POST-–∑–∞–ø—Ä–æ—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º 60 —Å–µ–∫—É–Ω–¥
                response = requests.post(
                    url,
                    auth=HTTPBasicAuth(user_1c, password_1c),
                    headers=headers,
                    json=data,
                    timeout=60
                )

                if response.status_code == 200:
                    logger.debug(
                        f"‚úîÔ∏è –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Å–¥–µ–ª–∫—É: {transaction_number}. "
                        f"–û—Ç–≤–µ—Ç: {response.text or '–ø—É—Å—Ç–æ–π'}"
                    )
                    success_flag = True
                    break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                else:
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                    logger.warning(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_number}. "
                        f"–ö–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}"
                    )

            except requests.exceptions.RequestException as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–µ
                logger.exception(f"‚õî –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ {url}: {e}")
                continue  # –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä

    return success_flag

# if __name__ == "__main__":
#     from src.utils import read_json, write_json
#
#     # data_json = read_json(r"C:\Users\Cherdantsev\Documents\develop\OCR_CONOS_FILES\large.json")
#     # send_production_data(data_json, kappa=True)
#     # print(data_json)
#
#     data_json = read_json(
#         r"C:\Users\Cherdantsev\Documents\develop\OCR_CONOS_FILES\WORKFLOW\SUCCESS\test_out_1\–î–£_EGML001367.pdf.json")
#     remap_production_data(data_json)
#     write_json(r"C:\Users\Cherdantsev\Documents\develop\OCR_CONOS_FILES\WORKFLOW\SUCCESS\test_out_1\new.json",
#                data_json)
#
#     # func = r'TransactionNumberFromBillOfLading'
#     # arg = r'MEDUAS937386'
#     # tn = cup_http_request(func, arg)
#     # print(tn)
#     #
#     # func = "GetTransportPositionNumberByTransactionNumber"
#     # print(cup_http_request(func, tn[-1].split()[0], encode=False))
