import smtplib
import chardet
from typing import Literal, List, Optional, Tuple, Union
from collections.abc import Sequence
from zoneinfo import ZoneInfo

from email.message import Message
from email.header import decode_header
from email.mime.text import MIMEText
from email.utils import parsedate_to_datetime

from config import CONFIG
from src.logger import logger


def convert_email_date_to_moscow(
        date_mail: str,
        fmt: str = "%Y-%m-%d %H:%M:%S %Z"
) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ email –≤ —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ –ú–æ—Å–∫–≤–µ.

    Args:
        - date_mail: –°—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–∏—Å—å–º–∞ (email_message.get("Date"))
        - fmt: –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "%Y-%m-%d %H:%M:%S %Z")

    Returns:
        str: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
    """
    try:
        dt = parsedate_to_datetime(date_mail)
        moscow_dt = dt.astimezone(ZoneInfo("Europe/Moscow"))
        return moscow_dt.strftime(fmt)
    except Exception as e:
        print(e)
        print(date_mail)
        return "Unknown date"


def detect_encoding(body: bytes) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –±–∞–π—Ç–æ–≤"""

    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ—Ä–µ–∑ chardet
    detection = chardet.detect(body)
    encoding = detection['encoding'] if detection['confidence'] > 0.7 else None
    if encoding:
        try:
            body.decode(encoding)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏
            return encoding
        except UnicodeDecodeError:
            pass

    # 2. Fallback-–∫–æ–¥–∏—Ä–æ–≤–∫–∏
    for fallback_encoding in ('utf-8', 'windows-1251', 'iso-8859-1'):
        try:
            body.decode(fallback_encoding)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º
            return fallback_encoding
        except UnicodeDecodeError:
            continue

    # 3. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º utf-8
    return 'utf-8'


def decode_subject(subject: Optional[str]) -> str:
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Ç–µ–º—É –ø–∏—Å—å–º–∞ –∏–∑ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    if not subject:
        return "(–ë–µ–∑ —Ç–µ–º—ã)"
    decoded: List[Tuple[Union[bytes, str], Optional[str]]] = decode_header(subject)
    subject_text: str = ""
    for text, encoding in decoded:
        if isinstance(text, bytes):
            subject_text += text.decode(encoding or 'utf-8', errors='ignore')
        else:
            subject_text += text
    return subject_text


def extract_text_content(email_message: Message) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å –∏–∑ email-—Å–æ–æ–±—â–µ–Ω–∏—è.

    Args:
        email_message: –û–±—ä–µ–∫—Ç email-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.

    Returns:
        Optional[str]: –¢–µ–∫—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ø–∏—Å—å–º–∞ –∏–ª–∏ None, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–Ω–æ–≥–æ—Å–æ—Å—Ç–∞–≤–Ω—ã–º (multipart): —Ç–µ–∫—Å—Ç + HTML + –≤–ª–æ–∂–µ–Ω–∏—è + ...
    if email_message.is_multipart():
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é walk()
        for part in email_message.walk():
            # –ò—â–µ–º —á–∞—Å—Ç—å —Å —Ç–∏–ø–æ–º text/plain (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
            if part.get_content_type() == "text/plain":
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –±–∞–π—Ç—ã
                body: bytes = part.get_payload(decode=True)
                if body:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
                    encoding = detect_encoding(body)
                    return body.decode(encoding, errors='ignore')
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–Ω–æ–≥–æ—Å–æ—Å—Ç–∞–≤–Ω–æ–µ
        body = email_message.get_payload(decode=True)
        if body:
            encoding = detect_encoding(body)
            return body.decode(encoding, errors='ignore')
    return None


def extract_html_content(email_message: Message) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç HTML-—á–∞—Å—Ç—å –∏–∑ email-—Å–æ–æ–±—â–µ–Ω–∏—è.

    Args:
        email_message: –û–±—ä–µ–∫—Ç email-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.

    Returns:
        Optional[str]: HTML-—á–∞—Å—Ç—å –ø–∏—Å—å–º–∞ –∏–ª–∏ None, –µ—Å–ª–∏ HTML –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
    html_content: bytes | None = None
    if email_message.is_multipart():
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ HTML
        for part in email_message.walk():
            if part.get_content_type() == "text/html":
                html_content: bytes = part.get_payload(decode=True)
                # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π HTML-—á–∞—Å—Ç–∏
                break
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–Ω–æ–≥–æ—Å–æ—Å—Ç–∞–≤–Ω–æ–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ç–∏–ø –Ω–∞–ø—Ä—è–º—É—é
    elif email_message.get_content_type() == "text/html":
        html_content: bytes = email_message.get_payload(decode=True)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π HTML-–∫–æ–Ω—Ç–µ–Ω—Ç
    if html_content:
        encoding = detect_encoding(html_content)
        html_decoded: str = html_content.decode(encoding, errors='ignore')
        return html_decoded
    return None


def decode_filename(filename_raw: str) -> str:
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ-ASCII —Å–∏–º–≤–æ–ª—ã."""
    decoded_parts = decode_header(filename_raw)
    return ''.join([
        part.decode(encoding or 'utf-8') if isinstance(part, bytes) else part
        for part, encoding in decoded_parts
    ])


def extract_attachments(email_message: Message) -> list[tuple[str, bytes]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ email-—Å–æ–æ–±—â–µ–Ω–∏—è.

    Args:
        email_message: –û–±—ä–µ–∫—Ç email-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.

    Returns:
        list[tuple[str, bytes]]: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∏–º—è —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –±–∞–π—Ç–∞—Ö.
    """
    attachments: list[tuple[str, bytes]] = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–Ω–æ–≥–æ—Å–æ—Å—Ç–∞–≤–Ω—ã–º
    if not email_message.is_multipart():
        return attachments  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –Ω–µ—Ç —á–∞—Å—Ç–µ–π

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for part in email_message.walk():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ–º
        content_disposition = part.get("Content-Disposition")
        if content_disposition and "attachment" in content_disposition.lower():
            filename_raw = part.get_filename()  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤–ª–æ–∂–µ–Ω–∏—è
            payload = part.get_payload(decode=True)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–ª–æ–∂–µ–Ω–∏—è

            if filename_raw and payload:
                filename = decode_filename(filename_raw)
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ç–µ–∂ (–∏–º—è —Ñ–∞–π–ª–∞, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ) –≤ —Å–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–∏–π
                attachments.append((filename, payload))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    attachments.sort(key=lambda x: x[0])
    return attachments


def send_email(
        email_text: str,
        recipient_emails: str | Sequence[str],
        subject: str,
        email_user: str,
        email_pass: str,
        smtp_server: str,
        smtp_port: int,
        email_format: Literal["plain", "html"] = "plain",
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å–µ–º –∫–∞–∫ –æ–¥–Ω–æ–º—É –∞–¥—Ä–µ—Å–∞—Ç—É, —Ç–∞–∫ –∏ —Å–ø–∏—Å–∫—É
    –∞–¥—Ä–µ—Å–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ SMTP-—Å–µ—Ä–≤–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TLS-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è. –õ–æ–≥–∏—Ä—É–µ—Ç
    —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞—è —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

    Args:
        email_text: –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
        recipient_emails: –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        email_user: –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        email_pass: –ü–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ SMTP-—Å–µ—Ä–≤–µ—Ä–µ
        smtp_server: –ê–¥—Ä–µ—Å SMTP-—Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "smtp.gmail.com")
        smtp_port: –ü–æ—Ä—Ç SMTP-—Å–µ—Ä–≤–µ—Ä–∞ (–æ–±—ã—á–Ω–æ 587 –¥–ª—è TLS)
        email_format: –§–æ—Ä–º–∞—Ç –ø–∏—Å—å–º–∞ ("plain" –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ "html")

    Returns:
        None
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–¥–∏–Ω –∞–¥—Ä–µ—Å
    recipients = (
        [recipient_emails] if isinstance(recipient_emails, str)
        else recipient_emails
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    if not recipients or not all(isinstance(email, str) and email for email in recipients):
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {recipients}")
        return

    format_email_log = (
        f"üìß –ò–°–•–û–î–Ø–©–ò–ô EMAIL:\n"
        f"{'-' * 80}\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {', '.join(recipients)}\n"
        f"–¢–µ–º–∞: {subject}\n"
        f"–¢–µ–∫—Å—Ç:\n{email_text}\n"
        f"{'-' * 80}"
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if CONFIG.block_email_sending:
        logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π block_email_sending")
        logger.info(format_email_log)
        return

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–∏—Å—å–º–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏ –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8
        msg = MIMEText(email_text, email_format, 'utf-8')
        msg['Subject'] = subject

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SMTP-—Å–µ—Ä–≤–µ—Ä–æ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        with smtplib.SMTP(smtp_server, smtp_port, timeout=10) as server:
            server.starttls()  # –í–∫–ª—é—á–µ–Ω–∏–µ TLS-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            server.login(email_user, email_pass)  # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            server.send_message(msg, from_addr=email_user, to_addrs=recipients)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        logger.info(f"üìß Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {subject}")
        logger.info(format_email_log)

    except smtplib.SMTPException as smtp_error:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ SMTP (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        logger.exception(f"‚õî –û—à–∏–±–∫–∞ SMTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {smtp_error}")
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
        logger.exception(f"‚õî –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")
