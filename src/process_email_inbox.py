import email
# import imaplib
import time
import logging
from pathlib import Path
from email.message import Message
from email.utils import parseaddr
import ssl

from imapclient import IMAPClient

from config import config
from src.utils import sanitize_pathname
from src.utils_email import (
    convert_email_date_to_moscow,
    decode_subject,
    extract_text_content,
    extract_attachments,
)
from src.models.metadata_model import StructuredMetadata

logger = logging.getLogger(__name__)


def process_unseen_email_inbox(server: IMAPClient) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –≤ –ø–∞–ø–∫–µ INBOX.

    –ò—â–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –≤–ª–æ–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–ª–æ–∂–µ–Ω–∏—è –≤
    —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É, —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö metadata.json –∏ –æ—Ç–º–µ—á–∞–µ—Ç –ø–∏—Å—å–º–∞
    –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç peek –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö,
    —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—Ä—É—á–Ω—É—é. –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø–∏—Å—å–º–∞ —Å –æ—à–∏–±–∫–∞–º–∏,
    –ª–æ–≥–∏—Ä—É—è –∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.


    Returns:
        None
    """
    try:
        # –ü–æ–∏—Å–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
        message_ids = server.search(["UNSEEN"])
        if not message_ids:
            logger.debug("‚ûñ –ù–æ–≤—ã—Ö –ø–∏—Å–µ–º –Ω–µ—Ç")
            return

        logger.info(f"üìß –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º: {len(message_ids)}")

        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∏—Å—å–º–∞
        for msg_id in message_ids:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (BODY.PEEK)
                msg_data = server.fetch(msg_id, ["BODY.PEEK[]"])
                if not msg_data or msg_id not in msg_data:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ (id {msg_id})")
                    continue

                # –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ –≤ –æ–±—ä–µ–∫—Ç Message –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                email_message: Message = email.message_from_bytes(msg_data[msg_id][b"BODY[]"])

                # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
                metadata = StructuredMetadata(
                    subject=decode_subject(email_message.get("Subject", "")),
                    sender=parseaddr(email_message.get("From", ""))[1],
                    date=email_message.get("Date", "Unknown date"),
                    text_content=extract_text_content(email_message) or "No text content",
                )

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π
                attachments: list[tuple[str, bytes]] = extract_attachments(email_message)

                if not attachments:
                    logger.info(f"üìß –ü–∏—Å—å–º–æ –æ—Ç {metadata.sender} (id {msg_id}) –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–ª–æ–∂–µ–Ω–∏–π")
                    # –û—Ç–º–µ—Ç–∫–∞ –ø–∏—Å—å–º–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
                    server.add_flags(msg_id, ["\\Seen"])
                    continue

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π –ø—Ä–∏ –∏—Ö –Ω–∞–ª–∏—á–∏–∏
                logger.info(
                    f"üìß –í –ø–∏—Å—å–º–µ –æ—Ç {metadata.sender} (id {msg_id}) –Ω–∞–π–¥–µ–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–π: {len(attachments)}"
                )

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
                date_time = convert_email_date_to_moscow(metadata.date, "%y%m%d_%H%M%S")
                save_dir = sanitize_pathname(
                    config.INPUT_DIR,
                    f"{date_time}_{metadata.sender}",
                    is_file=False
                )

                # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                save_dir.mkdir(exist_ok=True, parents=True)
                logger.debug(f"‚úîÔ∏è –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {save_dir}")

                # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è
                for file_name, content in attachments:
                    file_ext = Path(file_name).suffix.lower()
                    if file_ext not in config.valid_ext:
                        valid_ext_text = ", ".join(f"'*{ext}'" for ext in config.valid_ext)
                        warning_message = (
                            f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {valid_ext_text}."
                        )
                        metadata.errors[file_name].add(warning_message)
                        logger.warning(f"‚ùå {warning_message}")
                        continue

                    # –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    file_path = sanitize_pathname(save_dir, file_name, is_file=True)

                    try:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                        file_path.write_bytes(content)
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        metadata.files.append(f"{file_path.name}")
                        logger.info(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                    except OSError as e:
                        logger.error(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                metadata_path = save_dir / "metadata.json"
                metadata.save(metadata_path)
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata_path}")

                # –û—Ç–º–µ—á–∞–µ–º –ø–∏—Å—å–º–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                server.add_flags(msg_id, ["\\Seen"])
                logger.info(f"‚úîÔ∏è –ü–∏—Å—å–º–æ (id {msg_id}) –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")

            except Exception as e:
                logger.exception(f"‚õî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ (id {msg_id}): {e}")

    except Exception as e:
        logger.exception(f"‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∏—Å–µ–º: {e}")


class EmailMonitor:
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º IMAP IDLE –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç IDLE –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±—Ä—ã–≤–µ SSL/IMAP-—Å–µ—Å—Å–∏–∏.
    - –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç IDLE (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞).
    - –î–µ–ª–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ forced_timeout —Å–µ–∫—É–Ω–¥.
    """

    def __init__(
            self,
            email_user: str = config.email_address,
            email_pass: str = config.email_password,
            imap_server: str = config.imap_server,
            imap_port: int = config.imap_port,
            idle_timeout: int = 10,
            forced_timeout: int = 25,
            reconnect_timeout: int = 1500,
    ) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ IMAP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.

        Args:
            email_user: –õ–æ–≥–∏–Ω –ø–æ—á—Ç—ã
            email_pass: –ü–∞—Ä–æ–ª—å
            imap_server: IMAP-—Å–µ—Ä–≤–µ—Ä
            imap_port: –ü–æ—Ä—Ç
            idle_timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ IDLE (—Å–µ–∫)
            forced_timeout: –ü–µ—Ä–∏–æ–¥ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏—Å–µ–º (—Å–µ–∫)
            reconnect_timeout: –ú–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π IDLE-—Å–µ—Å—Å–∏–∏ (—Å–µ–∫)
        """
        self.email_user = email_user
        self.email_pass = email_pass
        self.imap_server = imap_server
        self.imap_port = imap_port
        self.idle_timeout = idle_timeout
        self.forced_timeout = forced_timeout
        self.reconnect_timeout = reconnect_timeout

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.running: bool = False
        self.server: IMAPClient | None = None

    # --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ---
    def connect(self):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å IMAP-—Å–µ—Ä–≤–µ—Ä–æ–º.

        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç IMAPClient —Å SSL, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–∞–ø–∫—É INBOX –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        """
        # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        self.disconnect()

        try:
            self.server = IMAPClient(
                host=self.imap_server,
                port=self.imap_port,
                ssl=True,
                ssl_context=ssl.create_default_context()
            )

            self.server.login(self.email_user, self.email_pass)
            self.server.select_folder("INBOX")  # –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É INBOX –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º
            logger.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ IMAP-—Å–µ—Ä–≤–µ—Ä—É")
        except Exception as e:
            logger.exception(f"‚õî –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP-—Å–µ—Ä–≤–µ—Ä—É: {e}")
            self.server = None

    def disconnect(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å IMAP (–±–µ–∑–æ–ø–∞—Å–Ω–æ)."""
        if not self.server:
            return

        try:
            self.server.idle_done()
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ IDLE: {e}")

        try:
            self.server.logout()
            logger.info("üîî –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.exception(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ logout: {e}")
        finally:
            self.server = None

    def reconnect(self, timeout: int = 0) -> None:
        """
        –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É IMAP.

        Args:
            timeout: –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º (—Å–µ–∫). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.
        """
        logger.debug(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP-—Å–µ—Ä–≤–µ—Ä—É (–ø–∞—É–∑–∞ {timeout}s)")
        self.disconnect()
        if self.running:
            if timeout > 0: time.sleep(timeout)
            self.connect()

    def stop(self) -> None:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
        """
        if not self.running:
            logger.debug("üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—á—Ç—ã –£–ñ–ï –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return

        self.running = False
        self.disconnect()
        logger.info("üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—á—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def monitor(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—á—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∂–∏–º IMAP IDLE –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.

        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ IMAP-—Å–µ—Ä–≤–µ—Ä—É.
        2. –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∏—Å–µ–º –∫–∞–∂–¥—ã–µ forced_timeout —Å–µ–∫—É–Ω–¥.
        3. –°–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ IDLE –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∏—Å—å–º–∞ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        4. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ reconnect_timeout.
        5. –ü—Ä–∏ –ª—é–±—ã—Ö –æ—à–∏–±–∫–∞—Ö –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.

        –†–∞–±–æ—Ç–∞–µ—Ç –¥–æ –≤—ã–∑–æ–≤–∞ stop().
        """
        self.running = True
        last_check = 0
        last_reconnect = time.time()

        try:
            self.connect()
            logger.info(
                f"üîÑ –°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (idle={self.idle_timeout}s, "
                f"forced={self.forced_timeout}s, reconnect={self.reconnect_timeout}s)"
            )

            while self.running:
                try:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ forced_timeout
                    if time.time() - last_check >= self.forced_timeout:
                        logger.debug("üïí –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email –ø–æ —Ç–∞–π–º–µ—Ä—É")
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                        process_unseen_email_inbox(self.server)
                        last_check = time.time()

                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞ –∫–∞–∂–¥—ã–µ reconnect_timeout
                    if time.time() - last_reconnect >= self.reconnect_timeout:
                        logger.debug("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏")
                        self.reconnect()
                        last_reconnect = time.time()
                        continue

                    # –í—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º IDLE ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                    self.server.idle()
                    responses = self.server.idle_check(timeout=self.idle_timeout)
                    logger.debug("responses: %s", responses)

                    try:
                        self.server.idle_done()
                    except ssl.SSLEOFError:
                        logger.debug("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã–ª SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (SSLEOFError)")
                        raise
                    except Exception as e:
                        logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ IDLE: {e}")
                        raise
                    finally:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                        if responses:
                            logger.info(f"üîî IDLE —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {responses}")
                            process_unseen_email_inbox(self.server)
                            last_check = time.time()

                except Exception as e:
                    if not self.running:
                        # –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤ –º–æ–º–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚Äî –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º
                        break

                    logger.exception(f"‚õî –û—à–∏–±–∫–∞ –≤ IDLE-—Ü–∏–∫–ª–µ: {e}")
                    self.reconnect(timeout=5)
                    if self.running and self.server:
                        logger.info("üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
                        process_unseen_email_inbox(self.server)  # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                        last_check = time.time()

        except Exception as e:
            logger.exception(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        finally:
            self.disconnect()
            logger.info("üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
