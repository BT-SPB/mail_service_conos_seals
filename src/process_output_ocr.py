import shutil
import logging
import time
from pathlib import Path

from config import config
from src.utils import (
    write_json,
    write_text,
    transfer_files,
    sanitize_pathname,
    is_directory_empty,
)
from src.utils_tsup import tsup_http_request, send_data_to_tsup
from src.utils_email import send_email
from src.utils_data_process import fetch_transaction_numbers, correct_container_numbers
from src.models.enums import DocType
from src.models.metadata_model import StructuredMetadata
from src.models.document_model import StructuredDocument

logger = logging.getLogger(__name__)


def process_output_ocr() -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã OCR, –∏–∑–≤–ª–µ–∫–∞—è –Ω–æ–º–µ—Ä–∞ —Å–¥–µ–ª–æ–∫ –∏–∑ –¶–£–ü –ø–æ –∫–æ–Ω–æ—Å–∞–º–µ–Ω—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–º–µ—Ä–∞ –ø–ª–æ–º–± –¶–£–ü.

    –§—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ OCR, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã,
    –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –¶–£–ü –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    –∏–ª–∏ –æ—à–∏–±–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—á–∏—â–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.

    Args:
        None

    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω—è–µ—Ç —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email, –Ω–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ñ–∞–π–ª metadata.json
    folders_to_process: list[Path] = [
        folder for folder in config.OUTPUT_DIR.iterdir()
        if folder.is_dir() and (folder / "metadata.json").is_file()
    ]

    # –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–µ—Ç, –ª–æ–≥–∏—Ä—É–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if not folders_to_process:
        logger.debug("‚ûñ –ù–æ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Ç")
        return

    logger.info(f"üìÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(folders_to_process)}")

    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    for folder in folders_to_process:
        try:
            # –ß–∏—Ç–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ metadata.json
            metadata_path: Path = folder / "metadata.json"
            metadata: StructuredMetadata = StructuredMetadata.load(metadata_path)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç–∏ –¥–ª—è –ø–∞–ø–æ–∫ –æ—à–∏–±–æ–∫ –∏ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
            error_subdir = sanitize_pathname(config.ERROR_DIR, folder.name, is_file=False)
            success_subdir = sanitize_pathname(config.SUCCESS_DIR, folder.name, is_file=False)

            metadata.error_dir = error_subdir
            metadata.success_dir = success_subdir

            container_notes: list[str] = []

            # # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: –Ω–∞–ª–∏—á–∏–µ –∏ —Ç–∏–ø—ã –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            # required_fields = {
            #     "subject": str,
            #     "sender": str,
            #     "date": str,
            #     "text_content": str,
            #     "files": list,
            #     "errors": dict,
            #     "partial_successes": dict,
            #     "successes": dict
            # }
            # if not metadata or not all(
            #         isinstance(metadata.get(field), expected_type)
            #         for field, expected_type in required_fields.items()
            # ):
            #     error_message = (f"–§–∞–π–ª metadata.json –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç "
            #                      f"–∏–ª–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {metadata_path}")
            #     logger.warning(f"‚ùå {error_message}")
            #     metadata["GLOBAL_ERROR"] = error_message
            #     write_json(metadata_path, metadata)
            #     # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø–∞–ø–∫—É –æ—à–∏–±–æ–∫
            #     shutil.move(folder, error_subdir)
            #     continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if not metadata.files:
                error_message = f"–í metadata.json –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {metadata_path}"
                logger.warning(f"‚ùå {error_message}")
                metadata.global_errors.add(error_message)
                metadata.save(metadata_path)
                shutil.move(folder, error_subdir)
                continue

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            for source_file_name in metadata.files:
                source_file_path: Path = folder / source_file_name
                json_path: Path = folder / f"{source_file_name}.json"
                json_path_tsup: Path = folder / f"{source_file_name}_tsup.json"
                files_to_transfer = [source_file_path, json_path, json_path_tsup]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                if not source_file_path.is_file():
                    error_message = "–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
                    logger.warning(f"‚ùå {error_message} ({source_file_path})")
                    metadata.errors[source_file_name].add(error_message)
                    transfer_files(files_to_transfer, error_subdir, "move")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞
                if not json_path.is_file():
                    error_message = "JSON-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ OCR –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
                    logger.warning(f"‚ö†Ô∏è {error_message} ({json_path})")
                    metadata.errors[source_file_name].add(error_message)
                    transfer_files(files_to_transfer, error_subdir, "move")
                    continue

                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON, –∑–∞–≥—Ä—É–∂–∞—è –≤ pydantic –º–æ–¥–µ–ª—å
                document: StructuredDocument = StructuredDocument.load(json_path)
                document.file_path = source_file_path

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω–æ—Å–∞–º–µ–Ω—Ç–∞
                if not document.bill_of_lading:
                    error_message = "–ù–æ–º–µ—Ä –∫–æ–Ω–æ—Å–∞–º–µ–Ω—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω."
                    logger.warning(f"‚ö†Ô∏è {error_message} ({json_path})")
                    document.errors.add(error_message)
                    document.save(json_path)
                    metadata.errors[source_file_name].update(document.format_report_with_errors())
                    transfer_files(files_to_transfer, error_subdir, "move")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                if not document.containers:
                    error_message = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞."
                    logger.warning(f"‚ö†Ô∏è {error_message} ({json_path})")
                    document.errors.add(error_message)
                    document.save(json_path)
                    metadata.errors[source_file_name].update(document.format_report_with_errors())
                    transfer_files(files_to_transfer, error_subdir, "move")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–æ–º–±,
                # –∫—Ä–æ–º–µ –î–£ –æ—Ç —Ç–µ—Ä–∏–Ω–∞–ª–∞ –ù–ú–¢–ü, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–ª–æ–º–± –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ
                if document.document_type != DocType.DU_NMTP:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –ø—É—Å—Ç—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –ø–ª–æ–º–±
                    containers_with_empty_seals: set[str] = {
                        cont.container for cont in document.containers
                        if not cont.seals
                    }

                    # –ï—Å–ª–∏ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏–º–µ—é—Ç –ø—É—Å—Ç—ã–µ –ø–ª–æ–º–±—ã
                    if len(containers_with_empty_seals) == len(document.containers):
                        error_message = (f"–ù–æ–º–µ—Ä–∞ –ø–ª–æ–º–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: "
                                         f"{', '.join(containers_with_empty_seals)}.")
                        logger.warning(f"‚ö†Ô∏è {error_message} ({json_path})")
                        document.errors.add(error_message)
                        document.save(json_path)
                        metadata.errors[source_file_name].update(document.format_report_with_errors())
                        transfer_files(files_to_transfer, error_subdir, "move")
                        continue

                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –ø—É—Å—Ç—ã–º–∏ –ø–ª–æ–º–±–∞–º–∏, –ª–æ–≥–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—á–Ω—É—é –æ—à–∏–±–∫—É
                    if containers_with_empty_seals:
                        error_message = (f"–ù–æ–º–µ—Ä–∞ –ø–ª–æ–º–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è —á–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: "
                                         f"{', '.join(containers_with_empty_seals)}.")
                        logger.warning(f"‚ö†Ô∏è {error_message} ({json_path})")
                        document.errors.add(error_message)
                        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –ø—É—Å—Ç—ã–º –ø–æ–ª–µ–º "seals"
                        document.containers = [
                            cont for cont in document.containers
                            if cont.container not in containers_with_empty_seals
                        ]

                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –¶–£–ü –ø–æ –∫–æ–Ω–æ—Å–∞–º–µ–Ω—Ç—É
                fetch_transaction_numbers(document)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω—ã –ª–∏ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                if not document.transaction_numbers:
                    error_message = (
                        f"–ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –¶–£–ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. "
                        f"–í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–º–µ—Ä –∫–æ–Ω–æ—Å–∞–º–µ–Ω—Ç–∞ ({document.bill_of_lading}) "
                        f"—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ."
                    )
                    logger.warning(f"‚ö†Ô∏è {error_message} ({json_path})")
                    document.errors.add(error_message)
                    document.save(json_path)
                    metadata.errors[source_file_name].update(document.format_report_with_errors())
                    transfer_files(files_to_transfer, error_subdir, "move")
                    continue

                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–æ–º–µ—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                container_numbers_cup: list[list[str]] = [
                    # –û—á–∏—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                    [number.strip() for number in tsup_http_request(
                        "GetTransportPositionNumberByTransactionNumber",
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä, –æ—Ç—Å–µ–∫–∞—è –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ê–ê-0095444 –æ—Ç 14.04.2025" ‚Üí "–ê–ê-0095444"
                        transaction_number.split()[0],
                        encode=False
                    )]
                    for transaction_number in document.transaction_numbers
                ]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω—ã –ª–∏ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                if not any(container_numbers_cup):
                    error_message = (
                        f"–ù–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É —Å–¥–µ–ª–∫–∏ ({document.transaction_numbers}) "
                        f"–∏–∑ –¶–£–ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
                    )
                    logger.warning(f"‚ö†Ô∏è {error_message} ({source_file_path})")
                    document.errors.add(error_message)
                    document.save(json_path)
                    metadata.errors[source_file_name].update(document.format_report_with_errors())
                    transfer_files(files_to_transfer, error_subdir, "move")
                    continue

                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–∑ OCR –∏ –¶–£–ü
                container_numbers_cup_set: set[str] = {
                    x
                    for sublist in container_numbers_cup
                    for x in sublist
                }

                correct_container_numbers(document, container_numbers_cup_set)

                container_numbers_ocr_set: set[str] = {cont.container for cont in document.containers}

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–µ–∂–¥—É –Ω–∞–±–æ—Ä–∞–º–∏ –Ω–æ–º–µ—Ä–æ–≤
                if not container_numbers_cup_set & container_numbers_ocr_set:
                    error_message = (
                        f"–ù–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–∑ OCR ({', '.join(container_numbers_ocr_set)}) "
                        f"–Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∏–∑ –¶–£–ü ({', '.join(container_numbers_cup_set)}) "
                        f"–ø–æ –Ω–æ–º–µ—Ä—É —Å–¥–µ–ª–∫–∏ {document.transaction_numbers}."
                    )
                    logger.warning(f"‚ö†Ô∏è {error_message} ({source_file_path})")
                    document.errors.add(error_message)
                    document.save(json_path)
                    metadata.errors[source_file_name].update(document.format_report_with_errors())
                    transfer_files(files_to_transfer, error_subdir, "move")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¶–£–ü
                missing_containers: set[str] = container_numbers_ocr_set - container_numbers_cup_set
                if missing_containers:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫
                    # –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã
                    error_message = (
                        f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ({', '.join(missing_containers)}) "
                        f"–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –¶–£–ü –ø–æ –Ω–æ–º–µ—Ä—É —Å–¥–µ–ª–∫–∏ {document.transaction_numbers}."
                    )
                    logger.warning(f"‚ö†Ô∏è {error_message} ({source_file_path})")
                    document.errors.add(error_message)
                    document.containers = [
                        cont for cont in document.containers
                        if cont.container not in missing_containers
                    ]

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –¶–£–ü –∏ –∫–æ–¥–∏—Ä—É–µ–º —Å–∞–º —Ñ–∞–π–ª –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.
                document.encode_file()

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∞—á–∏ –≤ –¶–£–ü
                data_for_tsup = document.to_tsup_dict()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
                write_json(json_path_tsup, data_for_tsup)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –¶–£–ü, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                if config.enable_send_data_to_tsup:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –¶–£–ü. –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    is_send_production_data = send_data_to_tsup(
                        "SendProductionDataToTransaction", data_for_tsup
                    )
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                    if is_send_production_data:
                        document.is_data_sent_to_tsup = True
                    else:
                        error_message = (
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –¶–£–ü "
                            f"–ø–æ –Ω–æ–º–µ—Ä—É —Å–¥–µ–ª–∫–∏ {document.transaction_numbers}"
                        )
                        logger.warning(f"‚ùå {error_message} ({json_path})")
                        document.errors.add(error_message)
                        document.save(json_path)
                        metadata.errors[source_file_name].update(document.format_report_with_errors())
                        transfer_files(files_to_transfer, error_subdir, "move")
                        continue
                else:
                    logger.info(
                        "üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –¶–£–ü –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π 'enable_send_data_to_tsup'"
                    )

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                logger.info(f"‚úîÔ∏è –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ: {source_file_path}")
                document.save(json_path)
                if document.errors:
                    metadata.partial_successes[source_file_name].update(document.format_report_with_errors())
                else:
                    metadata.successes[source_file_name].update(document.format_report_with_errors())

                transfer_files(files_to_transfer, success_subdir, "move")

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                container_notes.extend(cont.note for cont in document.containers if cont.note)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            metadata.save(metadata_path)

            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞.
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –≤—ã–Ω–æ—Å—è—Ç—Å—è –≤ —Ç–µ–º—É email –ø–∏—Å—å–º–∞
            container_notes = list(dict.fromkeys(container_notes))

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            email_text = metadata.email_report()
            if email_text:
                subject = (
                        f"–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç: {metadata.subject}" +
                        (f" + {', '.join(container_notes)}" if container_notes else "")
                )

                send_email(
                    email_text=email_text,
                    recipient_emails=config.notification_emails,
                    subject=subject,
                    email_format="html",
                )

            if config.block_processed_files_to_output:
                write_text(folder / "email_data.html", email_text)
                time.sleep(5)
            else:
                # –ö–æ–ø–∏—Ä—É–µ–º metadata.json –≤ error_subdir, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω—ã–µ —É—Å–ø–µ—Ö–∏
                if metadata.errors or metadata.partial_successes:
                    transfer_files(metadata_path, error_subdir, "copy2")
                    write_text(error_subdir / "email_data.html", email_text)

                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º metadata.json –≤ success_subdir, –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—Ö–∏
                if metadata.successes:
                    transfer_files(metadata_path, success_subdir, "move")
                    write_text(success_subdir / "email_data.html", email_text)

                # –£–¥–∞–ª—è–µ–º metadata.json –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏).
                # –£—Å–ª–æ–≤–∏–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —É—Å–ø–µ—Ö–æ–≤.
                if metadata_path.exists():
                    try:
                        metadata_path.unlink()
                    except OSError as e:
                        logger.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {metadata_path}: {e}")

                # –û—á–∏—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: —É–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ –ø—É—Å—Ç–∞, –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
                if is_directory_empty(folder):
                    folder.rmdir()
                    logger.info(f"‚úîÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {folder}")
                else:
                    residual_destination = error_subdir / f"residual_files"
                    shutil.move(folder, residual_destination)
                    logger.error(
                        f"‚ùó‚ùó‚ùó –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {folder.name} –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã. "
                        f"–û–Ω–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ {residual_destination} –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
                    )

        except Exception as e:
            logger.exception(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {folder}: {e}")
            time.sleep(2)
            continue
